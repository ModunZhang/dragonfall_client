apply plugin: 'com.android.application'

//dannyhe: we read the version infomation from "version.properties"
def Properties projectVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if(!version['versionCode']) version['versionCode'] = 1
    if(!version['versionName']) version['versionName'] = "1.0"
    return version
}
//end for read version

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    lintOptions {
        warningsAsErrors false
        disable 'CommitPrefEdits'
    }
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 15
    }

    productFlavors {
        googleplay {
            applicationId "com.xapcn.dragonfall"
            versionCode projectVersion()['versionCode'] as int
            versionName projectVersion()['versionName']
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifestMain.xml"
        assets.srcDir "assets"
        aidl.srcDir "src/com/android/vending/billing" //google play v3 billing
    }

    sourceSets.googleplay {
        manifest.srcFile "AndroidManifest.xml"
    }

    signingConfigs {
        release {
            storeFile file("keystore/xapcn_dragonfall_gp.keystore")
            storePassword "twhsMbcZxJ4isvgWX4BJ"
            keyAlias "xapcn_dragonfall"
            keyPassword "twhsMbcZxJ4isvgWX4BJ"
            //Including the passwords for your release key and keystore inside the build file is not a good security practice
            //keyPassword System.console().readLine("\nKey password: ")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile project(':libcocos2dx')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //TODO: set the jar to each flavors

    //facebook
    compile 'com.facebook.android:facebook-android-sdk:4.0.0'

    //google play services
    googleplayCompile 'com.google.android.gms:play-services-plus:8.1.0'
    googleplayCompile 'com.google.android.gms:play-services-ads:8.1.0'
    googleplayCompile 'com.google.android.gms:play-services-gcm:8.1.0'
    googleplayCompile 'com.google.android.gms:play-services-vision:8.1.0'
}

// dannyhe:we add some tasks to help us,use the cmmand 'gradle task' see all tasks

//java tasks
ant.importBuild '../GooglePlayPreprocess.xml'
ant.importBuild '../PayPalPreprocess.xml'

android.applicationVariants.all { variant ->
    variant.productFlavors.each { flavor ->
        if (flavor.name.equals('googleplay')) {
            variant.javaCompile.dependsOn(GooglePlayPreprocess)
        }
    }
    variant.outputs.each { output ->
        output.outputFile = new File(
                output.outputFile.parent,
                output.outputFile.name.replace(".apk", "-${variant.versionName}-${variant.versionCode}.apk"))
    }
}

//ndk tasks
task buildNative(type:Exec,group:'Game') {
  description 'build our native code(cpp).'
  executable = 'shell'
  commandLine './build_native_release.sh'
  standardOutput = new ByteArrayOutputStream()
  environment('ANDROID_NDK_ROOT',android.ndkDirectory.getAbsolutePath())
  ext.output = {
    return standardOutput.toString()
  }
}

task backUpNativeSymbols(type:Zip,group:'Game') {
    description 'backup our native symbols to a zip file .'
    appendix = 'symbols'
    version = projectVersion()['versionName'] + '('+ projectVersion()['versionCode'] + ')'
    from 'obj'
    doLast {
        println 'We created a archive at :' + backUpNativeSymbols.archivePath
    }
}

backUpNativeSymbols.shouldRunAfter buildNative

//adb tasks
def adb = android.getAdbExe().toString()
android.productFlavors.each { flavor ->
    def replaceName = 'replaceLua' + flavor.name.capitalize()
    def runName = 'run' + flavor.name.capitalize()
    def stopName = 'stop' + flavor.name.capitalize()
    task(runName,type:Exec,group:'Game') {
        description 'run the ' + flavor.name.capitalize() + ' game on device.'
        def argOfClass = flavor.applicationId + '/org.cocos2dx.lua.AppActivity'
        commandLine "$adb",'shell','am','start','-n',argOfClass
    }
    task(stopName,type:Exec,group:'Game') {
        description 'stop the ' + flavor.name.capitalize() + ' game on device.'
        commandLine "$adb",'shell','am','force-stop',flavor.applicationId
    }
    task(replaceName,type:Exec,group:'Game') {
        description 'replace the ' + flavor.name.capitalize() + ' zip file of lua on device.'
        workingDir project.rootDir
        commandLine "$adb", 'push','../../../update_android/scripts/game.zip','/mnt/sdcard/batcatstudio/dragonfall/bundle/scripts/'
    }
}