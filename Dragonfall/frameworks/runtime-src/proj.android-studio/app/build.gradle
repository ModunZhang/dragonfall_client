apply plugin: 'com.android.application'

//dannyhe: we read the version infomation from "version.properties"
def Properties projectVersion() {
    def versionFile = new File(project.rootDir, 'version.properties')
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if(!version['versionCode']) version['versionCode'] = 1
    if(!version['versionName']) version['versionName'] = "1.0"
    if(!version['appMinVersion']) version['appMinVersion'] = "1.0"
    if(!version['appHoc']) version['appHoc'] = false
    return version
}

//end for read version

def String gameIdForFlavors(name) {
    def gameIdOfFlavors = ['googleplay':'dragonfall','paypal':'dragonfall_paypal']
    return gameIdOfFlavors[name]
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    lintOptions {
        warningsAsErrors false
        disable 'CommitPrefEdits'
    }
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 15
        buildConfigField "String", "GAME_ID", "\"Batcat\"" //identity for unzip path
    }

    signingConfigs {
        googleplay {
            storeFile file("keystore/xapcn_dragonfall_gp.keystore")
            storePassword "twhsMbcZxJ4isvgWX4BJ"
            keyAlias "xapcn_dragonfall"
            keyPassword "twhsMbcZxJ4isvgWX4BJ"
        }

         paypal {
            storeFile file("keystore/dragonfall_google_play.keystore")
            storePassword "yAb7E9oJ3mooW9Il2coW"
            keyAlias "batcatstudio"
            keyPassword "yAb7E9oJ3mooW9Il2coW"
        }

    }

    productFlavors {
        googleplay {
            applicationId "com.xapcn.dragonfall"
            versionCode projectVersion()['versionCode'] as int
            versionName projectVersion()['versionName']
            signingConfig signingConfigs.googleplay
            buildConfigField "String", "GAME_ID", "\"dragonfall\""
            manifestPlaceholders = ['APP_MIN_VERSION':projectVersion()['appMinVersion'],'APP_HOC':projectVersion()['appHoc'] as String]
        }
        paypal {
            applicationId "com.batcatstudio.dragonfall"
            versionCode projectVersion()['versionCode'] as int
            versionName projectVersion()['versionName']
            signingConfig signingConfigs.paypal
            buildConfigField "String", "GAME_ID", "\"dragonfall_paypal\""
            manifestPlaceholders = ['APP_MIN_VERSION':projectVersion()['appMinVersion'],'APP_HOC':projectVersion()['appHoc'] as String]
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifestMain.xml"
        assets.srcDir "assets"
        aidl.srcDir "src/com/android/vending/billing" //google play v3 billing
    }

    sourceSets.googleplay {
        manifest.srcFile "AndroidManifest.xml"
        res.srcDir "res-googleplay"
        assets.srcDir "assets-googleplay"
    }
    sourceSets.paypal {
        manifest.srcFile "AndroidManifestPayPal.xml"
        res.srcDir "res-paypal"
        assets.srcDir "assets-paypal"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'
        }
    }
}

dependencies {
    compile project(':libcocos2dx')
    // apk for google play
    googleplayCompile files('libs/AF-Android-SDK-v3.3.0.jar', 'libs/Game_Analytics_SDK_Android_3.2.3.jar')
    
    googleplayCompile 'com.facebook.android:facebook-android-sdk:4.0.0'
    
    googleplayCompile 'com.google.android.gms:play-services-plus:8.1.0'
    googleplayCompile 'com.google.android.gms:play-services-ads:8.1.0'

    //apk for google paypal
    paypalCompile files('libs/PayPalAndroidSDK-2.13.1.jar', 'libs/okhttp-3.0.1.jar','libs/okio-1.6.0.jar')

    paypalCompile 'com.facebook.android:facebook-android-sdk:4.0.0'

    paypalCompile 'com.google.android.gms:play-services-plus:8.1.0'
}

// dannyhe:we add some tasks to help us,use the command 'gradle tasks' see all tasks

//java tasks
ant.importBuild '../GooglePlayPreprocess.xml'
ant.importBuild '../PayPalPreprocess.xml'

GooglePlayPreprocess.group = 'GameHelper'
PayPalPreprocess.group = 'GameHelper'

android.applicationVariants.all { variant ->
    variant.productFlavors.each { flavor ->
        if (flavor.name.equals('googleplay')) {
            variant.javaCompile.dependsOn(GooglePlayPreprocess)
        }else if(flavor.name.equals('paypal')) {
            variant.javaCompile.dependsOn(PayPalPreprocess)
        }
    }
    variant.outputs.each { output ->
        output.outputFile = new File(
                output.outputFile.parent,
                output.outputFile.name.replace(".apk", "-${variant.versionName}-${variant.versionCode}.apk"))
    }
}

//ndk tasks
task buildNative(type:Exec,group:'GameHelper') {
  description 'build our native code(cpp).'
  executable = 'shell'
  commandLine './build_native_release.sh'
  standardOutput = new ByteArrayOutputStream()
  environment('ANDROID_NDK_ROOT',android.ndkDirectory.getAbsolutePath())
  ext.output = {
    return standardOutput.toString()
  }
}

task backUpNativeSymbols(type:Zip,group:'GameHelper') {
    description 'backup our native symbols to a zip file .'
    appendix = 'symbols'
    version = projectVersion()['versionName'] + '('+ projectVersion()['versionCode'] + ')'
    from 'obj'
    doLast {
        println 'We created a archive at :' + backUpNativeSymbols.archivePath
    }
}

task cleanNativeSymbols(type: Delete,group:'GameHelper') {
    description 'clean the native symbols.'
    delete 'obj'
}


//check tasks
task checkVersionInfo << {
    println '------------------------------------------------'
    println 'version.properties:'
    println 'versionCode:'+ projectVersion()['versionCode']
    println 'versionName:'+ projectVersion()['versionName']
    println 'appMinVersion:'+ projectVersion()['appMinVersion']
    println 'appHoc:'+ projectVersion()['appHoc']
    println '------------------------------------------------'
}
checkVersionInfo.group = 'GameHelper'
checkVersionInfo.description = 'check the project version infomation in version.properties.'

backUpNativeSymbols.shouldRunAfter buildNative

//adb tasks
def adb = android.getAdbExe().toString()
android.productFlavors.each { flavor ->
    def replaceName = 'replaceLua' + flavor.name.capitalize()
    def runName = 'run' + flavor.name.capitalize()
    def stopName = 'stop' + flavor.name.capitalize()
    task(runName,type:Exec,group:'GameHelper') {
        description 'run the ' + flavor.name.capitalize() + ' game on device.'
        def argOfClass = flavor.applicationId + '/org.cocos2dx.lua.AppActivity'
        commandLine "$adb",'shell','am','start','-n',argOfClass
    }
    task(stopName,type:Exec,group:'GameHelper') {
        description 'stop the ' + flavor.name.capitalize() + ' game on device.'
        commandLine "$adb",'shell','am','force-stop',flavor.applicationId
    }
    task(replaceName,type:Exec,group:'GameHelper') {
        description 'replace the ' + flavor.name.capitalize() + ' zip file of lua on device.'
        workingDir project.rootDir
        def pathOfUnzip = '/mnt/sdcard/batcatstudio/'+ gameIdForFlavors(flavor.name)+ '/bundle/scripts/'
        commandLine "$adb", 'push','../../../update_android/scripts/game.zip',pathOfUnzip
    }
}
